// SPDX-License-Identifier: MIT

// Have our invariant aka properties

// What are our invariants ?

// 1. The total supply of DSC should be less than the total value of collateral

// 2.  Getter view functions should never revert <- evergreen invariant

pragma solidity ^0.8.18;

import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {DeployDSC} from "../../script/DeployDSC.s.sol";
import {DSCEngine} from "../../src/DSCEngine.sol";
import {DecentralizedStableCoin} from "../../src/DecentralizedStableCoin.sol";
import {HelperConfig} from "../../script/HelperConfig.s.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract InvariantTest is StdInvariant, Test {
    DeployDSC deployer;
    DSCEngine dsce;
    DecentralizedStableCoin dsc;
    HelperConfig config;
    address wEth;
    address wBtc;

    function setUp() external {
        deployer = new DeployDSC();
        (dsc, dsce, config) = deployer.run();
        (, , address weth, address wbtc) = config.activeNetworkConfig();
        wEth = weth;
        wBtc = wbtc;
        targetContract(address(dsce));
    }

    function invariant_protocolMustHaveMoreValueThanTotalSupply() public view {
        uint256 totalSupply = dsc.totalSupply();
        uint256 totalWethDeposited = IERC20(wEth).balanceOf(address(dsce));
        uint256 totalWbtcDeposited = IERC20(wBtc).balanceOf(address(dsce));

        uint256 wethValue = dsce.getUsdValue(wEth, totalWethDeposited);
        uint256 wbtcValue = dsce.getUsdValue(wBtc, totalWbtcDeposited);

        assert(wethValue + wbtcValue >= totalSupply);
    }
}
